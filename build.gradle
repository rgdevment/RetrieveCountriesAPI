plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.5'
    id 'io.spring.dependency-management' version '1.1.4'
    id "org.sonarqube" version "5.0.0.4638"
    id 'checkstyle'
    id 'jacoco'
    id 'pmd'
}

group = 'cl.tica.portfolio'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '21'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.postgresql:postgresql'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    runtimeOnly 'com.h2database:h2'
}

pmd {
    ruleSetFiles = files("codequality/ruleset.xml")
}

checkstyle {
    configFile = 'codequality/checkstyle.xml' as File
}

jacocoTestReport {
    dependsOn test
    reports {
        csv.required = true
        xml.required = true
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'LINE'
                minimum = 0.6
            }
        }

        rule {
            limit {
                counter = 'BRANCH'
                minimum = 0.6
            }
        }
    }
}

sonar {
    properties {
        property "sonar.projectKey", "rgdevment_RetrieveCountriesAPI"
        property "sonar.organization", "rgdevment"
        property "sonar.host.url", "https://sonarcloud.io"

        property "sonar.java.checkstyle.reportPaths", [
                "build/reports/checkstyle/main.xml",
                "build/reports/checkstyle/test.xml"
        ].join(",")
        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/test/jacocoTestReport.xml"

        property "sonar.java.coveragePlugin", "jacoco"
    }
}

project.tasks.named("sonar").configure {
    dependsOn "check"
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
}

test {
    jvmArgs("-XX:+EnableDynamicAgentLoading", "-Xshare:off")
}

tasks.register('populate', JavaExec) {
    javaLauncher = javaToolchains.launcherFor(javaLauncherSpec -> javaLauncherSpec.getLanguageVersion()
            .set(JavaLanguageVersion.of(21)))
    classpath = sourceSets.main.runtimeClasspath
    mainClass.set('cl.tica.portfolio.retrievecountriesapi.populate.Populate')
}
